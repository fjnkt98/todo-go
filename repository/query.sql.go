// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const createItem = `-- name: CreateItem :execresult
INSERT INTO
    "items" ("title")
VALUES
    ($1)
RETURNING
    "id",
    "title"
`

func (q *Queries) CreateItem(ctx context.Context, title string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createItem, title)
}

const fetchItems = `-- name: FetchItems :many
SELECT
    "id",
    "title",
    "updated_at"
FROM
    "items"
ORDER BY
    "id" ASC
`

func (q *Queries) FetchItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, fetchItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Title, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :execresult
UPDATE "items"
SET
    "title" = $2,
    "updated_at" = NOW()
WHERE
    "id" = $1
RETURNING
    id, title, updated_at
`

type UpdateItemParams struct {
	ID    int64  `db:"id"`
	Title string `db:"title"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateItem, arg.ID, arg.Title)
}
